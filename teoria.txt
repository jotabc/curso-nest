!!! NEST !!!.- Es un framework orientado al backend, esta trabajado con node son para app con node y está casi hecho con ts, no nos obliga a trabajar con TS pero a día de hoy TS tiene que estar presente en todas nuestras app. Nest por debajo o por defecto usa express que es un framework de node.
Con nest no nos preocupamos de como van a ser las carpetas, MVC o algun tipo de software, ellos nos proponen una a base de modulos, los cuales tendrán sus controladores, sus proovedores(servicios etc), ellos tienen todo implementarlo. 

Con su CLI, nosotros todo tenemos a mano, tenemos comandos para crear controladores, servicios, providers etc todo lo tiene en su CLI.

Instalación:
- npm i -g @nestjs/cli => este comando de aquí instala el cli de nestjs para poder usar la línea de comandos
- nest new . => con esto creamos una app de nest desde 0.

Al crear el proyecto con nest, nos crea un boilerplate de carpetas, en src es donde nosotros vamos a trabajar, tenemos 4 archivos principales :

    - app.controller.ts => donde tenemos nuestra clase principal o controlador principal donde lleva toda la lógica, ejecuta todas las funciones que le pasemos.

    - app.module.ts => 

    - app.service.ts => aqui van las funciones que nosotros creamos para que cuando llamemos en nuestro controlador ejecute este servicio. puedes ser una petición, o metodos como finAll, findBy etc etc.

    - main.ts => este es el inicializa nuestra app, aquí tenemos server creado, aquí pesca toda la config y nos levanta el servidor.
    
Nest por defecto usa la plataforma de express.
Segun la doc de nest podemos usar el empaquetador swc, para que el desarrollo sea mas rápido, podemos colocar en un script de node el sig comando:

    - "start:dev": "nest start --watch -- -b swc", agregando el -b swc usaremos el empaquetador swc.

!CONTROLLER!.- Son los encargados de procesas las solicitudes entrantes y devolver las respuestas al cliente, muchas de las veces procesa yendo al DB.
El mecanismo de enruramiento controla qué controlador recibe que solicitudes. Con frecuencia cada controlador tiene más de una ruta y diferentes rutas puedes realizar diff acciones.
Para crear un controlador básico, debemos de usar clases y decoradores. Los decoradores asocian las clases con los metadatos requeridos y permiten que nest cree un mapa de enrutamiento( vincule las solicitudes a los controladores correspondientes).
Podemos crear un controlador con un CRUD con la validación incorporada, podemos generar con el CLI, 
nest g resource [name].

En nest podemos crear nosotros mismo custom decoradores, los decoradores nos ayudan para decorar, osea, nos yuda a usar o inyectar dependencias o sirve también como extender la funcionalidad de una clase, ojo los decoradores son propios de typescript por ejm

// en php
class Some extends SomeController

// nest con decoradores
@Controller() //witout route
@Controller('cats') // with route cuando recibe una ruta, las subs rutas llevarén ese preffijo antes, osea en el controlador podemos nosotros cargar todas nuestras rutas que deseemos, cuando el decorador del contorller que extiende lleva una ruta todas las rutas hijas llevaran ese prefijo.
export class Some {
    ...rest of code
    @Get('name_route')
    function_to_execute => Para acceder a esta ruta sería dominio/cats/name_route

    => si el controller no lleva la ruta dentro se accede desde la raíz dominio/name_route

}

Usamos lo decoradores pata los tipos de peticiones, y el tipo de petición puede llevar dentro el nombre de la ruta ejm 

@SomeController()
export class Some {
    @Get('name_route')
    function_to_execute

}

Una cosa que nos facilita nest es que nosotros en express tenemos que parsear las respuestas del body en json colocando el middleware app.user(express.json()) aunque es una linea, con nest nosotros en las creaciones de las rutas debemos nosotros de retornar el tipo de campo en este caso object 

@Get()
  findAll(): object {
    return {
      message: 'this is a json',
    };
  }
  Automaticamente hace el parseo del json e igual no colocamos los content-type, e incluso el modifica los status code dependiendo de como vaya la peticion.

  Podemos nosotros usar o recibir en las funciones como en express la req, debemos importarlo con un decorador dentro de la función que queremos que tenga la req y la res, la request y la response viene de express
  import { Request, Response } from 'express'

  @Post()
  create(
    @Req() req: Request
    @Res() res: Response

   ): object {
    console.log(req.body);

    return req.body;
  }

Pero también nos facilita un poco de cosas nest con esto por que tenemos diff decoradores que don directos ya como por jem @Body(): que equivale al req.body y asi a continucacion una lista:

DECORADOR       =======>     EQUIVALENTE
@Request(), @Req()	        req
@Response(), @Res()*	    res
@Next()	                    next
@Session()	                req.session
@Param(key?: string)	    req.params / req.params[key]
@Body(key?: string)	        req.body / req.body[key]
@Query(key?: string)	    req.query / req.query[key]
@Headers(name?: string)	    req.headers / req.headers[name]
@Ip()	                    req.ip
@HostParam()	            req.hosts


ejms
// BODY => DTO es la interfaz de typeScript que puede llevar el body por ejm name: string, age: number etc
el DTO es un objeto de trasmferecia de dato sería como una interfaz, o como una clase ejm
Con esto podemos validar nosotros los datos que llegan al backend, define los como se enviarán los datos através de la red Ojo este eschema es cuando usanmos TS. Mas recomendado usar class, porque las clases son parte del standard ES6, porque, porque el código de TS se compilará a JS y quedará como almacenado como una clase en JS, en cambio con las interfaces de TS, al copilar a JS interface en JS no , entonces dutante la transpilacion nest no pueden consultarlas en tiempo de ejecución y las eliminará. 

export class CreateCatDto {
    name: string,
    age: number
}

export interface CreateCatDto {
    name: string,
    age: number
}

@Post()
  create(@Body() body: CreateCatDto): object {
    console.log(body);
    return body;
  }

// podemos personalizar los statusCode.
@Post()
@HttpCode(404)
  create(@Body() body: Interface): object {
    console.log(body);
    return body;
  }

Cuando nosotros trabajamos como nest, osea mediante carpetas y dentro nuestra lógica, nest no sabe que existen nuestros controladores porque esta totlamente separado en un carpeta, es decir, creamos una carpeta llamada cats aqui dentro iran servicios, dto, controladores y modulos de toda está lógica que sería cats, para hacer saber a nest que es un controlador debemos nosotros de module.
Las carpetas a trabajar se crean dentro de src. src/cats

Un controlador siempre esta asociado a un modulo siempre, en los modulos es donde se registran los controladores.

! PROVEEDORES!.- La idea princpla de un proveedor es que se puede inyectar como una dependencia, esto significa que los objetos pueden crear diversas relaciones entre sí, y la función "conectar" instancias de objetos pueden delegarse en gran medida al sistema de tiempo de ejecución de Nest.
Osea las logicas de devolucio osea, los return de las funciones no deben de llevar esa lógica los controladores si no separados.

! SERVICIOS !.- El responsable del almacenamiento y recuperación de datos, un buen candidato a ser un porveedor. Aqui van las funciones donde nosotros por ejm ripo finAll, findBy etc etc.

Los servicios tambien debemos de registrarlo en los modulos ejm:

import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { CatsController } from './cats/cats.controller';
import { CatsService } from './cats/cats.service';

@Module({
  imports: [],
  controllers: [AppController, CatsController], // registro del CatsController
  providers: [AppService, CatsService], // registro del CatsServices
})
export class AppModule {}


! MODULO !.- Cada app tiene alménos un modulo raíz, el modulo raíz es el punto de partida que utliza nest para crear el gŕafico de la app. Si la app es muy pequeña se puede usar un modulo raíz, casi nunca es recomendable tener un modula si no por cada carpeta crear un modulo, luego este se encapsulara.
OSea en este caso el modulo cat que estamos trabajando lo estamos registrando en el app.module.ts de la raíz, según recomendaciones de nest debemos de crear un modulo dentro de cats y ahí registrarlo, Un modulo puede llevar:
  - providers (services)
  - controllers
  - imports
  - exports
Un modulo de funciones simplemente organiza el código relevante para una función específica, manteniendo el código organzado y estableciendo límites claros. Esto nos ayuda a gestionar la complejidad y desarrollar con principios SOLID, especialmente a medida que crece el tamaño de la app y/o equipo.

cats/cats.module.ts
import { Module } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

@Module({
  imports: [],
  exports: [CatsService], => podemos usar este para poder compartir este catsServices, osea para comunicaciones entre varios modulos de nuestra app.

  controllers: [CatsController],
  providers: [CatsService],
})
export class CatsModule {}

Luego en nuestro modulo principal app.module.ts debemos de importar ese modulo
@Module({
  imports: [CatsModule], => importacion del modulo de acts asi tendremos acceso a todo eso.
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

Si no queremos usar la comunicaicon de modulos, entre si podemos usar modulos globales @Global().

! DIIF ENTRE DTO E Interface!.-
  - La interfaz es lo que va a representar lo que va a estar en la DB, es el objeto a guradarse en la DB, osea el nombre es tipo string, edad number etc etc.

  - Con un DTO podemos tener datos por defectos en la DB que no van ha ser lo mismo que le vamos a estar solicitando al cliente, osea, cuando creamos un recurso no le vamos a estar pidiendo un id a un cliente, o x ejm si no queremos eliminar fisicamente un elemento si no através de un estado true de forma lógica.
  Un DTO es la información que un cliente nos va a enviar, que posteriormente vamos a validar, con lo que no permitiremos enviar datos hasta que no cumpla la validación.

!Pipes!.- (Tubería) un pipe es una clase anotada con el @Injectable decorador, que implementa la PipeTransform interfaz. Tiene dos casos de uso típicos:

  - transformación.- Tranforma los datos de entrada a la forma deseada (x ejm, de cadena a entero).
  - validación.- evalúe los datos de entrada y, si son válidos, simplemente páselos sin cambios, de lo contrario, lanzar una excepción.
  Los pipes son pequelas validaciones que podemos colocar en la request. Los pipes lanzan excepciones si el dato no es el mismo tipo antes que se llame al controlador de la ruta.

  // EJM
  @Get(':id')
  findOne(@Param('id', ParseIntPipe) id: string) {
    return this.catsService.findOne(+id);
  }
  Aquí esperamos que el id que nos envien en la request siempre sea un número, es decir, api/1 válido, api/sss inválido, le obligamos a que nos mande siempre un número.
  La excepción evitará que el método findOne en este caso se ejecute en el cuerpo del método.
  Tiene también un método útil cuando nosotros queremos que sea un uuid por ejm de versión 4 y tiene que ser igual a la que le mandamos. Podemos crear también nosotros nuestros customPipes.

!Validaciones!.- Para las validaciones nostros podemos con cualuquier paquete en este caso con class validator que es un paquete externo. pnpm add class-validator class-transformer -SE
  - el class-tranformer nos servirá para trasnformar la data.

Para que nos sirve esto nos sirve por ejm para que cuando me crea un recurso en este caso un un gato, no pueda enviar vacío, el nombre etc etc que nos este vacío, osea, estamos validando los datos que nos envia el cliente.

1) Para nosotros tener una validación automática en nest, debemos de configurar en nuestro main o punto de entrada de mi app agregando la sig línea:

  //main.ts
  import { NestFactory } from '@nestjs/core';
  import { AppModule } from './app.module';
 
  import { ValidationPipe } from '@nestjs/common';

  async function bootstrap() {
    const app = await NestFactory.create(AppModule);
    app.useGlobalPipes(new ValidationPipe()) // línea agregada.
    await app.listen(process.env.PORT || 8080);
  }

  bootstrap();

2) Luego podemos agregar algunas reglas de validación en nuestros DTOs, usando decoradores porvisto por class-validator, de esta manera cualquier ruta que use ese DTO automaticamente aplicará estas reglas de validación.

// ejm
  import { IsInt, IsOptional, IsPositive, IsString } from 'class-validator';

  export class CreateCatDto {
    @IsString() // ejm de validaciones con decoradores de class-validator.
    name: string;

    @IsInt()
    @IsPositive()
    age: number;

    @IsString()
    @IsOptional()
    breed?: string;
  }

3) Podemos usar un validator que nos permite que cuando nosotros por ejm, tenemos un tipo string que necesita enviarse del cliente y el usuario nos manda un number, pordemos transforma la data automaticamente, por ejm si nos manda un age: "5" esperamos un número, al enviar al salvar este transform:
  1) Debemos de agregar la prop trasnform a true en nuestro main dentro del Validador global ejm
    // podemos tambien evitar que envien campos que no exista en nuestros schemas con whiteList: true
    // podemos lanzar un error si queremos de lo mismo.
  main.ts
  app.useGlobalPipes(
    new ValidationPipe({
      // esto hace que no puedan enviar un campo que no exista en nuestro DB, automaticamente lo elimina.
      whitelist: true,
      // este forbidNonWhitelisted si queremos activarla, lo que hace es tirar un error de la propiedad que no existe en el schema.
      forbidNonWhitelisted: true,
      transform: true, // nos sirve para trasnforma la data automaticamente.
    }),
  );

  2) Debemos en nustros dto, user el decorador Type de class-validator en ese caso y dentro pasarle una fn con el tipo de dato al que queremos que se transforme ejm

  export class CreateCatDto {
    @IsString()
    name: string;

    @IsInt()
    @IsPositive()
    @Type(() => Number)
    age: number;
  }

RESUMEN COMO TRABAJA NEST? .- Nest tiene una forma de trabjar explicita: dentro de src.
  1) Creacion de un carpeta donde este dentro la lógica de negicio, por ejm, estamos haciendo una app de productos, podemos crear una carpeta products, también users, etc etc dependiendo por decirlo de una forma los módulos principales de nuestra app, la lógica de negocio.

  2) Dentro de las carpetas debemos de crear toda esa lógica que llevara dichos modulos, dentro podemos generar DTO, interfaces, controller, modulos y servicios con son las 2 principales cosas de nuestra app.

  3) Como hacer buenas pŕacticas:
    - Separar la lógica de los controladores, los controllers con solo los encargados de ejecutar o llamar a esas funciones. name_folder.controllers.ts

    - En los servicios creamos las funciones con toda la lógica dentro la cual nosotros, podemos crear findAll, findOne, métodos que leugo podrán ser llamados de nuestro cliente.
    name_folder.service.ts

    - Modulos cada carpeta lleva que es donde nosotros registramos nuestros controladores, para su posterior uso si ni nest no puedo usarlo.
    name_folder.module.ts

  4) Debemos de registras ese modulo que nosotros creamos, si tenemos una carpeta products, dentro tendrá si o si un archivo module donde registramos nuestros constroladores y métodos que vamos a usar, debemos registar en el app.module.ts file que esta en src/app.module.ts, este es el modulo principal de nuestra app donde se registran cada modulo para su posterior uso, si no nest no lo puede usar.

  src/app.modules.ts
  import { Module } from '@nestjs/common';
  import { ProductsModule } from './products/products.module';

  @Module({
    imports: [ProductsModule], // importación de módulo products.
    controllers: [],
    providers: [],
  })
export class AppModule {}

!NEST CLI!.- Nos permite a nosotros crear service, controllers, modules, podemos usar el cli de nest cuando lo instalamos de forma global ejm:
    - nest => lanzando este comando nosotros podemos verificar los comandos(CLI) que tiene nest.
    - nest g resource dogs o nest g res dogs => con este comandito nostros podemos generar un CRUD completo, dogs es el nombre del modulo que queremos crear puede ser dogs, products, etc etc.
